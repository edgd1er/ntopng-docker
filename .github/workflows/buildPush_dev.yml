name: build ntopng-docker multi-arch images with nightly repository

on:
  push:
    branches: "master"
env:
  IMAGE: ntopng

jobs:
  build:
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #no stable for armhf
        tag: [ dev-latest ]

    env:
      TAG: ${{ matrix.tag }}
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
          install: true
          use: true
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Cache Docker layers
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Docker hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile.all
          build-args: |
            TZ: Europe/Paris
            TAG: ${{ matrix.TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          # removed linux/arm64
          platforms: linux/amd64,linux/arm/v7
          push: true
          tags: ${{ secrets.DOCKER_USER }}/${{ env.IMAGE }}:${{ env.TAG }}
      - name: clean
        if: always() && github.event_name != 'pull_request'
        run: |
          rm -f ${HOME}/.docker/config.json